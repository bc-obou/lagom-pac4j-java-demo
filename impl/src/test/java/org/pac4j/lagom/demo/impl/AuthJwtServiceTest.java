package org.pac4j.lagom.demo.impl;

import com.lightbend.lagom.javadsl.api.transport.Forbidden;
import com.lightbend.lagom.javadsl.testkit.ServiceTest;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.pac4j.lagom.demo.api.AuthJwtService;

import java.util.concurrent.ExecutionException;

import static com.lightbend.lagom.javadsl.testkit.ServiceTest.defaultSetup;
import static com.lightbend.lagom.javadsl.testkit.ServiceTest.startServer;
import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.pac4j.core.context.HttpConstants.AUTHORIZATION_HEADER;
import static org.pac4j.core.context.HttpConstants.BEARER_HEADER_PREFIX;

public class AuthJwtServiceTest {

    // JWT generated by JWTTestDataGenerator
    private static final String ALICE_SECRET_JWT = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJBbGljZSIsInJvbGVzIjpbIm1hbmFnZXIiXSwiaXNzIjoiaHR0cHM6XC9cL3BhYzRqLm9yZyIsImlhdCI6MTU0NzIzNzI4MywianRpIjoiYTA4NzM5M2UtMDQxMS00ZjNlLThmNjgtN2Y5NjAwNTM4ZmUwIn0.BQ-J3lMD65IJwlyuKCsSPAYRzmYp6fqyPo2cSE7PaIs";
    private static final String ALICE_SECRET_JWE = "eyJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiZGlyIn0..j9auivqzuQaFVcFF.TdiIV3ReHD0NWSjqfi4UqpIhpv7AFap5tg5duXdLQchyrsioKtRdlnQSX6D1aAbF27Yqw-MEu8uOypHG5klESSfQy_rVUavfJTnAguXImdylZEmL37BURDNnQia0cLL3DYJ6gsFQtrRJIsntO31icGimxVBF9DF1oSwG7Sw.F1bOoftL0oGg0PC2I-yvjw";
    private static final String ALICE_RSA_JWT = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJBbGljZSIsInJvbGVzIjpbIm1hbmFnZXIiXSwiaXNzIjoiaHR0cHM6XC9cL3BhYzRqLm9yZyIsImlhdCI6MTU0NzIzNzI4MywianRpIjoiYTA4NzM5M2UtMDQxMS00ZjNlLThmNjgtN2Y5NjAwNTM4ZmUwIn0.YuhvguJ83BacWIY3B_10xPQLIDvhrfmWFLpWiPRMo2g-EhRKxktux0XWHVPlLCzcKlZCQRGOGrQr7mwR0QpofJYEuFppITneDxNrIO3Mmy5kqvBusv9TnOydMB5GRjYXZxBnGaioRt2dG-6eQRJdJyRu87jxn6o6RpOGg3KpvCPqs8RJWBYRW6C_5NibkU99TUhdpLyfEX8dZ2Xj74RWZUN9kFA3JysY83OWJBh-gfuDpcfhJmmQYsK5z5UL5oxmoBQBYWfgaRA3qKqwwEx4h0pXn9KwwAo5D3qA_GkJlebOZejjN6DhDxyYcklo_a9ghBAso2a3msYYtDlitabpOw";
    private static final String ALICE_RSA_JWE = "eyJlbmMiOiJBMTI4R0NNIiwiYWxnIjoiUlNBLU9BRVAtMjU2In0.ERgpAydNeXVFRUaNjAhHePJqCpDalAkqTj_EzgBliAu86d8X3SS3n-URd0PXkzIuwidsHjDx90qjy0QHZfEG4cggOvCDnJxlJGJkBweQBo7Cb3SSyEtY2X5y3Cnn-fWOP7e86fID5QTWw--mqBUikI_ISPVueD2p48jdYcp3Tccw6BoK6R5wm_f0Iw93Q5hqd-T6s6sHtWDM6Vb6ixdbBV7N3RNSmnAOrnrbK5vQg5YeYO44oDBUSypQUYmatEBnlDc9nNHWFWJUqdgwiYKiD7L01wC4zVtIBWD9rg6HfT_2C7x77VPmnDUjUAq7_7_aAXR8r53PjKoCff0Y-prSjQ.wBFvmwOlnLUlZH1q.0wI7NAT4uNZtO5sZxqacMGyqfMCGlmZArDU3xDObbpXU18Hz3-QS7jNLUUG8p5cTS6bTSqj0kvM7n2l_E24nSsQC0USy8EoQDY8TUhYCkolxX7vyDr-lHIVKv3mYO2wT9la2bSmqNw26CyoDprAfdpsunDrXPmnPrTP3owA.QAavEKebRlvLy1cZcMpQwQ";
    private static final String ALICE_EC_JWT = "eyJhbGciOiJFUzI1NiJ9.eyJzdWIiOiJBbGljZSIsInJvbGVzIjpbIm1hbmFnZXIiXSwiaXNzIjoiaHR0cHM6XC9cL3BhYzRqLm9yZyIsImlhdCI6MTU0NzIzNzI4MywianRpIjoiYTA4NzM5M2UtMDQxMS00ZjNlLThmNjgtN2Y5NjAwNTM4ZmUwIn0.Jwj-WQdiyB4dfBJUjEMA2EDOfzAhNMTGjCralbmGU_kIDIGqlY1C33AMhbHfw6S4pPpL_Qk3oiQoWqe96bpSrQ";
    private static final String ALICE_EC_JWE = "eyJlcGsiOnsia3R5IjoiRUMiLCJjcnYiOiJQLTI1NiIsIngiOiJMclNQNjFxaWg4NFYxWEc1c2tpOFhtSXZOaWhRTWxKVWpkRUlTNWdOcVFNIiwieSI6ImVETTF4cXh5WTdlSjVNOHFieXFKa1FwTkgxNmM2VWJfVG9FcHVPNGtoOUUifSwiZW5jIjoiQTI1NkdDTSIsImFsZyI6IkVDREgtRVMrQTI1NktXIn0.NETT-saoV8KgS0j9C8wxoumuQDll4yR0fklZmR7UV35FBMwkvC4QeA.-p096AKseEBVPlz2.T1NTbNcz8_sCBcofhg_UYxeqGbrWkBmN_9lm3rRWnaGuBJRrzEHhSQa3B_DMJUd1eDi2ngG_nGnWTKdA87hwDA4mVUPpE6DscI5Z_X0LslPr6vGKJzKFh4SKULi6cHL3d3vToYaoW3AKTHZmDrpFz-SlVL7aGjHx76WiXDI.kXSXi_nZpt6e1U5M-vAFJQ";
    private static final String BOB_RSA_JWT = "eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJCb2IiLCJyb2xlcyI6WyJkZXZlbG9wZXIiXSwiaXNzIjoiaHR0cHM6XC9cL3BhYzRqLm9yZyIsImlhdCI6MTU0NzIzNzI4MywianRpIjoiNGJjNGNmNjEtYzVkYy00ODM5LWFiN2YtN2QyY2MxNDEwNTJiIn0.THmUlOWU6Mw1D5wt5FoBUClqWCI3AQ9om8l1YZ4U4m19QTSugZcWQFZUnA1AAYEcSJzHUvGezlYouFRF7CFds7tKE4Xyt7rglfjMnVqa1s6rAMG8zSEjNFsQ2k-nzNOy9V5YAEtLndHXOz6bek6cnIU0h8eUrYqm8R1DpFRu_pVewl008UF-iOpQJoYzg0wsSPp4ZPePrXOM5SCCDiUQ2kUBEHxRw6PVk34aXgSUHJC8aaK5Tt5GaOyI6fjIAvstZWFnXMpcUKylIUwdwKqybkoJYCxaK5_Q2otx6ImVfrLQSnjdL4QmhJvfcT19ZaEKS1Drmv8u-d3J6e0BdqodJg";

    private static ServiceTest.TestServer server;

    private static AuthJwtService service;

    @BeforeAll
    public static void setUp() {
        server = startServer(defaultSetup().withCluster(false));
        service = server.client(AuthJwtService.class);
    }

    @AfterAll
    public static void tearDown() {
        if (server != null) server.stop();
    }

    @Test
    public void authenticateByJwtRSASignature() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthenticate()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_RSA_JWT)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void authenticateByJwtRSAEncryption() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthenticate()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_RSA_JWE)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void authenticateByJwtSecretSignature() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthenticate()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_SECRET_JWT)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void authenticateByJwtSecretEncryption() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthenticate()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_SECRET_JWE)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void authenticateByJwtECSignature() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthenticate()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_EC_JWT)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void authenticateByJwtECEncryption() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthenticate()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_EC_JWE)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void authorizeByJwtManagerRole() throws ExecutionException, InterruptedException {
        String result = service.headerJwtAuthorize()
                .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(ALICE_RSA_JWT)))
                .invoke().toCompletableFuture().get();
        assertThat(result).isEqualTo("Alice");
    }

    @Test
    public void notAuthorizeByJwtDeveloperRole() {
        assertThatThrownBy(() -> {
            service.headerJwtAuthorize()
                    .handleRequestHeader(header -> header.withHeader(AUTHORIZATION_HEADER, BEARER_HEADER_PREFIX.concat(BOB_RSA_JWT)))
                    .invoke().toCompletableFuture().get();
        }).hasCauseInstanceOf(Forbidden.class);
    }
}
